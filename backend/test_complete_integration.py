#!/usr/bin/env python
"""
Complete Frontend-Backend Integration Test
"""
import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Core.settings')
django.setup()

BASE_URL = 'http://localhost:8000/api'

def test_complete_user_journey():
    """Test complete user journey from registration to booking"""
    print("üß™ Testing Complete User Journey")
    print("=" * 50)
    
    # Step 1: Health Check
    print("\n1Ô∏è‚É£ Testing Health Check...")
    try:
        response = requests.get(f'{BASE_URL}/health/')
        if response.status_code != 200:
            print("‚ùå Health check failed")
            return False
        print("‚úÖ Health check passed")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False
    
    # Step 2: User Registration
    print("\n2Ô∏è‚É£ Testing User Registration...")
    registration_data = {
        'firstName': 'John',
        'lastName': 'Doe',
        'email': 'john.doe@example.com',
        'password': 'testpass123'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/auth/register/', json=registration_data)
        if response.status_code != 201:
            print(f"‚ùå Registration failed: {response.status_code}")
            return False
        print("‚úÖ Registration successful")
    except Exception as e:
        print(f"‚ùå Registration error: {e}")
        return False
    
    # Step 3: User Login
    print("\n3Ô∏è‚É£ Testing User Login...")
    login_data = {
        'email': 'john.doe@example.com',
        'password': 'testpass123'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/auth/login/', json=login_data)
        if response.status_code != 200:
            print(f"‚ùå Login failed: {response.status_code}")
            return False
        
        data = response.json()
        token = data.get('token')
        if not token:
            print("‚ùå No token received")
            return False
        print("‚úÖ Login successful - Token received")
    except Exception as e:
        print(f"‚ùå Login error: {e}")
        return False
    
    # Step 4: Create Booking
    print("\n4Ô∏è‚É£ Testing Booking Creation...")
    booking_data = {
        'from': 'MSU Main Campus',
        'to': 'City Center',
        'date': '2024-01-15',
        'time': '09:00 AM',
        'numberOfPassengers': 2,
        'phoneNumber': '1234567890'
    }
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/bookings/create/', json=booking_data, headers=headers)
        if response.status_code != 201:
            print(f"‚ùå Booking creation failed: {response.status_code}")
            return False
        
        booking_response = response.json()
        booking_id = booking_response.get('booking_id')
        if not booking_id:
            print("‚ùå No booking ID received")
            return False
        print("‚úÖ Booking creation successful")
    except Exception as e:
        print(f"‚ùå Booking creation error: {e}")
        return False
    
    # Step 5: Get User Bookings
    print("\n5Ô∏è‚É£ Testing Get User Bookings...")
    try:
        response = requests.get(f'{BASE_URL}/bookings/user/', headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Get bookings failed: {response.status_code}")
            return False
        
        bookings_data = response.json()
        bookings = bookings_data.get('results', [])
        if not bookings:
            print("‚ùå No bookings found")
            return False
        print(f"‚úÖ User bookings fetched - {len(bookings)} bookings")
    except Exception as e:
        print(f"‚ùå Get bookings error: {e}")
        return False
    
    # Step 6: Get Notifications
    print("\n6Ô∏è‚É£ Testing Get Notifications...")
    try:
        response = requests.get(f'{BASE_URL}/notifications/', headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Get notifications failed: {response.status_code}")
            return False
        
        notifications_data = response.json()
        notifications = notifications_data.get('results', [])
        notification_id = None
        if notifications:
            notification_id = notifications[0].get('id')
        print(f"‚úÖ Notifications fetched - {len(notifications)} notifications")
    except Exception as e:
        print(f"‚ùå Get notifications error: {e}")
        return False
    
    # Step 7: Get Unread Count
    print("\n7Ô∏è‚É£ Testing Get Unread Count...")
    try:
        response = requests.get(f'{BASE_URL}/notifications/unread-count/', headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Get unread count failed: {response.status_code}")
            return False
        
        unread_data = response.json()
        unread_count = unread_data.get('unreadCount', 0)
        print(f"‚úÖ Unread count fetched - {unread_count} unread")
    except Exception as e:
        print(f"‚ùå Get unread count error: {e}")
        return False
    
    # Step 8: Mark Notification as Read (if exists)
    if notification_id:
        print("\n8Ô∏è‚É£ Testing Mark Notification as Read...")
        try:
            response = requests.put(f'{BASE_URL}/notifications/{notification_id}/read/', headers=headers)
            if response.status_code != 200:
                print(f"‚ùå Mark notification as read failed: {response.status_code}")
                return False
            print("‚úÖ Mark notification as read successful")
        except Exception as e:
            print(f"‚ùå Mark notification as read error: {e}")
            return False
    
    # Step 9: Mark All Notifications as Read
    print("\n9Ô∏è‚É£ Testing Mark All Notifications as Read...")
    try:
        response = requests.put(f'{BASE_URL}/notifications/mark-all-read/', headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Mark all notifications as read failed: {response.status_code}")
            return False
        print("‚úÖ Mark all notifications as read successful")
    except Exception as e:
        print(f"‚ùå Mark all notifications as read error: {e}")
        return False
    
    # Step 10: Cancel Booking
    print("\nüîü Testing Cancel Booking...")
    try:
        response = requests.put(f'{BASE_URL}/bookings/{booking_id}/cancel/', headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Cancel booking failed: {response.status_code}")
            return False
        print("‚úÖ Cancel booking successful")
    except Exception as e:
        print(f"‚ùå Cancel booking error: {e}")
        return False
    
    # Step 11: Delete Notification (if exists)
    if notification_id:
        print("\n1Ô∏è‚É£1Ô∏è‚É£ Testing Delete Notification...")
        try:
            response = requests.delete(f'{BASE_URL}/notifications/{notification_id}/', headers=headers)
            if response.status_code != 200:
                print(f"‚ùå Delete notification failed: {response.status_code}")
                return False
            print("‚úÖ Delete notification successful")
        except Exception as e:
            print(f"‚ùå Delete notification error: {e}")
            return False
    
    print("\nüéâ Complete User Journey Test Passed!")
    return True

def test_mobile_app_data_formats():
    """Test that backend handles mobile app data formats correctly"""
    print("\nüì± Testing Mobile App Data Formats")
    print("=" * 50)
    
    # Test registration with mobile app format
    print("\n1Ô∏è‚É£ Testing Registration Format...")
    registration_data = {
        'firstName': 'Jane',
        'lastName': 'Smith',
        'email': 'jane.smith@example.com',
        'password': 'testpass123'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/auth/register/', json=registration_data)
        if response.status_code != 201:
            print(f"‚ùå Registration format test failed: {response.status_code}")
            return False
        print("‚úÖ Registration format test passed")
    except Exception as e:
        print(f"‚ùå Registration format test error: {e}")
        return False
    
    # Test login with mobile app format
    print("\n2Ô∏è‚É£ Testing Login Format...")
    login_data = {
        'email': 'jane.smith@example.com',
        'password': 'testpass123'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/auth/login/', json=login_data)
        if response.status_code != 200:
            print(f"‚ùå Login format test failed: {response.status_code}")
            return False
        
        data = response.json()
        if not data.get('token'):
            print("‚ùå Login format test failed - no token")
            return False
        print("‚úÖ Login format test passed")
    except Exception as e:
        print(f"‚ùå Login format test error: {e}")
        return False
    
    # Test booking with mobile app format
    print("\n3Ô∏è‚É£ Testing Booking Format...")
    booking_data = {
        'from': 'MSU Campus',
        'to': 'Downtown',
        'date': '2024-01-20',
        'time': '10:30 AM',
        'numberOfPassengers': 1,
        'phoneNumber': '9876543210'
    }
    
    headers = {
        'Authorization': f'Bearer {data.get("token")}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.post(f'{BASE_URL}/bookings/create/', json=booking_data, headers=headers)
        if response.status_code != 201:
            print(f"‚ùå Booking format test failed: {response.status_code}")
            return False
        print("‚úÖ Booking format test passed")
    except Exception as e:
        print(f"‚ùå Booking format test error: {e}")
        return False
    
    print("\nüéâ Mobile App Data Format Tests Passed!")
    return True

def cleanup_test_data():
    """Clean up test data"""
    print("\nüßπ Cleaning up test data...")
    try:
        from bus_tracking.models import User
        User.objects.filter(email__in=['john.doe@example.com', 'jane.smith@example.com']).delete()
        print("‚úÖ Test data cleaned up")
    except Exception as e:
        print(f"‚ùå Cleanup error: {e}")

def main():
    """Run all integration tests"""
    print("üöÄ Complete Frontend-Backend Integration Testing")
    print("=" * 60)
    
    # Clean up any existing test data
    cleanup_test_data()
    
    # Test complete user journey
    journey_success = test_complete_user_journey()
    
    # Test mobile app data formats
    format_success = test_mobile_app_data_formats()
    
    # Clean up
    cleanup_test_data()
    
    print("\nüìä Final Results:")
    print(f"User Journey Test: {'‚úÖ PASSED' if journey_success else '‚ùå FAILED'}")
    print(f"Data Format Test: {'‚úÖ PASSED' if format_success else '‚ùå FAILED'}")
    
    if journey_success and format_success:
        print("\nüéâ ALL TESTS PASSED!")
        print("‚úÖ Frontend and backend are fully integrated!")
        print("‚úÖ Mobile app can communicate with Django backend!")
        print("‚úÖ All API endpoints are working correctly!")
        print("‚úÖ Data formats are compatible!")
        return True
    else:
        print("\n‚ùå Some tests failed. Check the logs above.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 